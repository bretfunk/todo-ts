{"remainingRequest":"/Volumes/code/fun/todo-ts/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Volumes/code/fun/todo-ts/node_modules/ts-loader/index.js??ref--4-2!/Volumes/code/fun/todo-ts/node_modules/babel-loader/lib/index.js??ref--4-3!/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts","dependencies":[{"path":"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts","mtime":1526072998000},{"path":"/Volumes/code/fun/todo-ts/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Volumes/code/fun/todo-ts/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Volumes/code/fun/todo-ts/node_modules/ts-loader/index.js","mtime":1525713677000},{"path":"/Volumes/code/fun/todo-ts/node_modules/babel-loader/lib/index.js","mtime":1519636541000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n(function () {\n    var enterModule = require('react-hot-loader').enterModule;\n    enterModule && enterModule(module);\n})();\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nfunction register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.toString());\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl);\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n                });\n            }\n            else {\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\nexports.default = register;\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker.register(swUrl).then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker) {\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            console.log('New content is available; please refresh.');\n                        }\n                        else {\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            }\n        };\n    }).catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n}\nfunction checkValidServiceWorker(swUrl) {\n    fetch(swUrl).then(response => {\n        if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        }\n        else {\n            registerValidSW(swUrl);\n        }\n    }).catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n    });\n}\nfunction unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\nexports.unregister = unregister;\n;\n(function () {\n    var reactHotLoader = require('react-hot-loader').default;\n    var leaveModule = require('react-hot-loader').leaveModule;\n    if (!reactHotLoader) {\n        return;\n    }\n    reactHotLoader.register(isLocalhost, \"isLocalhost\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n    reactHotLoader.register(register, \"register\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n    reactHotLoader.register(registerValidSW, \"registerValidSW\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n    reactHotLoader.register(checkValidServiceWorker, \"checkValidServiceWorker\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n    reactHotLoader.register(unregister, \"unregister\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n    leaveModule(module);\n})();\n;\n",{"version":3,"file":"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts","sourceRoot":"","sources":["/Volumes/code/fun/todo-ts/node_modules/babel-loader/lib/index.js??ref--4-3!/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts"],"names":[],"mappings":"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","sourcesContent":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString());\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker) {\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a 'New content is\n              // available; please refresh.' message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      }\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(isLocalhost, \"isLocalhost\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n  reactHotLoader.register(register, \"register\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n  reactHotLoader.register(registerValidSW, \"registerValidSW\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n  reactHotLoader.register(checkValidServiceWorker, \"checkValidServiceWorker\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n  reactHotLoader.register(unregister, \"unregister\", \"/Volumes/code/fun/todo-ts/src/registerServiceWorker.ts\");\n  leaveModule(module);\n})();\n\n;"]}]}